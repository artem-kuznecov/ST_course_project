// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: internal/protos/MusicService.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MusicClient is the client API for Music service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MusicClient interface {
	RequestMusic(ctx context.Context, in *MusicRequest, opts ...grpc.CallOption) (*MusicResponse, error)
	AddMusic(ctx context.Context, opts ...grpc.CallOption) (Music_AddMusicClient, error)
	RemoveMusic(ctx context.Context, in *RemoveMusicRequest, opts ...grpc.CallOption) (*RemoveMusicResponse, error)
}

type musicClient struct {
	cc grpc.ClientConnInterface
}

func NewMusicClient(cc grpc.ClientConnInterface) MusicClient {
	return &musicClient{cc}
}

func (c *musicClient) RequestMusic(ctx context.Context, in *MusicRequest, opts ...grpc.CallOption) (*MusicResponse, error) {
	out := new(MusicResponse)
	err := c.cc.Invoke(ctx, "/GRPC.Music/requestMusic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) AddMusic(ctx context.Context, opts ...grpc.CallOption) (Music_AddMusicClient, error) {
	stream, err := c.cc.NewStream(ctx, &Music_ServiceDesc.Streams[0], "/GRPC.Music/addMusic", opts...)
	if err != nil {
		return nil, err
	}
	x := &musicAddMusicClient{stream}
	return x, nil
}

type Music_AddMusicClient interface {
	Send(*AddMusicRequest) error
	CloseAndRecv() (*AddMusicResponse, error)
	grpc.ClientStream
}

type musicAddMusicClient struct {
	grpc.ClientStream
}

func (x *musicAddMusicClient) Send(m *AddMusicRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *musicAddMusicClient) CloseAndRecv() (*AddMusicResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AddMusicResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *musicClient) RemoveMusic(ctx context.Context, in *RemoveMusicRequest, opts ...grpc.CallOption) (*RemoveMusicResponse, error) {
	out := new(RemoveMusicResponse)
	err := c.cc.Invoke(ctx, "/GRPC.Music/removeMusic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MusicServer is the server API for Music service.
// All implementations must embed UnimplementedMusicServer
// for forward compatibility
type MusicServer interface {
	RequestMusic(context.Context, *MusicRequest) (*MusicResponse, error)
	AddMusic(Music_AddMusicServer) error
	RemoveMusic(context.Context, *RemoveMusicRequest) (*RemoveMusicResponse, error)
	mustEmbedUnimplementedMusicServer()
}

// UnimplementedMusicServer must be embedded to have forward compatible implementations.
type UnimplementedMusicServer struct {
}

func (UnimplementedMusicServer) RequestMusic(context.Context, *MusicRequest) (*MusicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestMusic not implemented")
}
func (UnimplementedMusicServer) AddMusic(Music_AddMusicServer) error {
	return status.Errorf(codes.Unimplemented, "method AddMusic not implemented")
}
func (UnimplementedMusicServer) RemoveMusic(context.Context, *RemoveMusicRequest) (*RemoveMusicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMusic not implemented")
}
func (UnimplementedMusicServer) mustEmbedUnimplementedMusicServer() {}

// UnsafeMusicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MusicServer will
// result in compilation errors.
type UnsafeMusicServer interface {
	mustEmbedUnimplementedMusicServer()
}

func RegisterMusicServer(s grpc.ServiceRegistrar, srv MusicServer) {
	s.RegisterService(&Music_ServiceDesc, srv)
}

func _Music_RequestMusic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MusicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).RequestMusic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GRPC.Music/requestMusic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).RequestMusic(ctx, req.(*MusicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_AddMusic_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MusicServer).AddMusic(&musicAddMusicServer{stream})
}

type Music_AddMusicServer interface {
	SendAndClose(*AddMusicResponse) error
	Recv() (*AddMusicRequest, error)
	grpc.ServerStream
}

type musicAddMusicServer struct {
	grpc.ServerStream
}

func (x *musicAddMusicServer) SendAndClose(m *AddMusicResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *musicAddMusicServer) Recv() (*AddMusicRequest, error) {
	m := new(AddMusicRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Music_RemoveMusic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMusicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).RemoveMusic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GRPC.Music/removeMusic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).RemoveMusic(ctx, req.(*RemoveMusicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Music_ServiceDesc is the grpc.ServiceDesc for Music service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Music_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GRPC.Music",
	HandlerType: (*MusicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "requestMusic",
			Handler:    _Music_RequestMusic_Handler,
		},
		{
			MethodName: "removeMusic",
			Handler:    _Music_RemoveMusic_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "addMusic",
			Handler:       _Music_AddMusic_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "internal/protos/MusicService.proto",
}
